"""


GWAS pipeline 


Requirements for input:


1. To remain sensible, it would be required to proivde a "sample sheet" in tsv format.
   There should at least be two columns: 
   	sample, file
   The read orientation would be inferred.  For now, we assume that the output from
   different lanes are merged - will extend it

2. If our input is already bam - for now i think it is better to extract fastq reads
   and realign so there are no software artifacts.


"""


# Get inputs
def get_inputs(samplesheetfile):
	
	samplesheet = pd.read_tsv(samplesheetfile)

	samplesheet = samplesheet.set_index("sample",drop=False)

	samplesheet = samplesheet.sort_values(["sample","file"])

	return samplesheet



samplesheet = get_inputs(config["samplesheet"])




# Should move this to a proper config file




# Placeholder for now 
rule all:

	expand("output/{sample}/final.txt", sample=samplesheet["sample"].drop_duplicates.values())


# Pretty ugly - but it willl work for now
rule trimming:
	input: 
		FR=lambda wildcards: samplesheet.loc[wildcards.sample].values[0]
		RR=lambda wildcards: samplesheet.loc[wildcards.sample].values[1]

	output: 
		FR="output/{sample}/{sample}_R1.fq.gz",
		RR="output/{sample}/{sample}_R2.fq.gz",
		FRu="output/{sample}/{sample}_U_R1.fq.gz",
		RRu="output/{sample}/{sample}_U_R2.fq.gz"
		

	shell:
		"trimmomatic PE -threads {threads} {input.FR} {input.RR} {output.FR} {output.FRu} {output.RR} {output.RRu} "
		"SLIDINGWINDOW:4:20"

# Not the correct way - need to configure for .alt files too
rule bwa_mapping:
	input: 
		FR=rules.trimming.output.FR,
		RR=rules.trimming.output.RR
	output:
		bam="output/mapping/{sample}.bam",
		bamindex="output/mapping/{sample}.bam.bai"
		bam_unmapped="output/mapping/{sample}_unmapped.bam"

	params: index=config["bwaindex"]
	threads: 4
	shell:
		"bwa mem -K 100000000 -Y {params.index} -t {threads} -R '@RG\tID:{wildcards.sample}\tSM:{wildcards.sample}' -R 'SM={wildcards.sample}' {input.FR} {input.RR} |"
		"tee >(samtools view -f 4 -o {output.bam_unmapped}) >(samtools view -bu -F 4 | samtools sort -o {output.bam}) &&"
		"samtools index {output.bam}"


rule markduplicates:
	input:
		bai=rules.bwa_mapping.output.bamindex,
		bam=rules.bwa_mapping.output.bam
	output:
		bam="output/mapping/{sample}.markduplicates.bam",
		metrics="output/reports/{sample}.markduplicates.metrics.txt"

	shell:
		"picard MarkDuplicates I={input.bam} O={output.bam} M={output.metrics} ASSUME_SORT_ORDER=coordinate"



#This takes te samples directly from markduplicates. As suggested, we may need to downsample first

rule downsample:
	input:
		bam=rules.markduplicates.output.bam
	output:
		bam="output/mapping/{sample}.downsample.bam"
	params:
		fraction=0.2
	shell:
		"picard DownsampleSam I={input.bam} O={output.bam} P={params.fraction} CREATE_INDEX=true"


rule bqsr:
	input:
		bam=rules.downsample.output.bam

	output:
		bqsr="output/bqsr/{sample}.bqsr"
	params:
		refernce_fasta="path_to_hg38",
		knownSites_dbsnp="dbsnp_known_sites_vcf",
		knownSites_mills="mills_and_1000_gold_standard",
		knownSites_indel="hg38_known_indels",
		optional_flags="--rf BadCigar --preserve_qscores_less_than 6",
		regions="-L chr1 -L chr2 -L chr3 -L chr4 -L chr5 -L chr6 -L chr7 -L chr8 -L chr9 -L chr10 -L chr11 -L chr12 -L chr13 -L chr14 -L chr15 -L chr16 -L chr17 -L chr18 -L chr19 -L chr20 -L chr21 -L chr22"
	shell:
		"gatk BaseRecalibrator -I {input.bam} -R {params.reference_fasta} -O {output.bqsr}"
		"--known-sites {params.knownSites_dbsnp} "
		"--known-sites {params.knownSites_dbsnp} "
		"--known-sites {params.known_Sites_indel} "
		"{params.optional_flags} "


rule apply_bqsr:
	input:
		bam=rules.markduplicates.output.bam,
		bqsr=rules.bqsr.output.bqsr
	params:
		reference="hg38_reference",
		optional_flags="--globalQScorePrior -1.0 --preserve_qscores_less_than 6 --useOriginalQualities --create-output-bam-index",
		compression_flags="-SQQ 10 -SQQ 20 -SQQ 30"
	output:
		bam="output/mapping/{sample}.recalibrated.bam"

	shell:
		"gatk ApplyBQSR -R {params.reference} -I {input.bam} -bqsr{input.bqsr} -O {output.bam} --disable_indel_quanls "
		"{params.optional_flags} {params.compression_flags}"	

rule haplotypecaller:
	input:
		bam=rules.apply_bqsr.output.bam
	params:
		reference="hg38_reference",
		other_options=" -G StandardAnnotation -G StandardHGAnnotation -G AS_StandardAnnotation"
		
	output:
		gvcf="output/haplotypecaller/{sample}.g.vcf.gz"
	
	
	shell:
		"gatk HaplotypeCaller -R {params.reference} -I {input.bam} -O {output.gvcf} {params.other_options}"

